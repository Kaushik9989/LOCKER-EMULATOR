<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Locker Emulator</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <!-- HTML5 QR Code library -->
    <script src="https://unpkg.com/html5-qrcode"></script>
    <style>
        /* Container for the steps inside the locker card */
        .compartment-steps {
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border-radius: 0.25rem;
            animation: fadeIn 0.3s ease-in-out;
        }

        /* Make the step text subtle but readable */
        .compartment-steps small {
            font-size: 0.8rem;
            color: #555;
        }

        /* Make the confirm button full width and modern */
        .compartment-steps button {
            width: 100%;
            font-size: 0.85rem;
            font-weight: 500;
            margin-top: 0.4rem;
        }

        /* Simple fade-in animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(5px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #lockerScreen {
            background: #000000 radial-gradient(circle at 20% 20%, #111, #000);
            border: 2px solid #333;
            border-radius: 8px;
            box-shadow: inset 0 0 30px #000, 0 0 10px rgba(0, 0, 0, 0.5);
            color: #00ff88;
            font-family: 'Courier New', Courier, monospace;
            text-shadow: 0 0 5px #00ff88, 0 0 10px #00ff88;
            min-height: 140px;
        }

        .lcd-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .lcd-main {
            font-size: 1.1rem;
            font-weight: bold;
        }

        .lcd-sub {
            font-size: 0.85rem;
            opacity: 0.8;
        }

        .blinking {
            animation: blinker 1s linear infinite;
            border-width: 3px !important;
        }

        @keyframes blinker {
            50% {
                border-color: #ffc107;
            }
        }

        .locker-card {
            min-height: 80px;
            cursor: pointer;
            transition: box-shadow 0.2s;
        }

        .locker-card:hover {
            box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.2);
        }

        .html5-qrcode-close-button {
            display: none !important;
        }

        #qr-reader {
            border-radius: 0.5rem;
            overflow: hidden;
            background-color: #f8f9fa;
            position: relative;
        }

        #qr-reader video {
            width: 100% !important;
            height: auto !important;
            border-radius: 0.5rem;
            object-fit: cover;
        }

        #qr-status {
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .html5-qrcode-element {
            outline: none !important;
        }
    </style>

</head>

<body class="bg-light">
    <div class="container-fluid py-3">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h3 class="mb-0">Smart Locker System</h3>
                <small class="text-muted">Locker ID: <%= lockerId %></small>
            </div>

        </div>
        <!-- Initial Compartment Modal -->
        <!-- Compartment Modal -->
        <div class="modal fade" id="compartmentModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content text-center">
                    <div class="modal-header border-0">
                        <h5 class="modal-title w-100">
                            <i class="bi bi-box-seam-fill me-2 text-success"></i> Drop-off Location Ready
                        </h5>
                    </div>
                    <div class="modal-body">
                        <p class="text-muted mb-3">
                            Locker prepared for <strong id="packageType">medium package</strong>
                        </p>

                        <div class="p-3 border rounded mb-3 position-relative bg-light">
                            <div class="small mb-1">
                                <i class="bi bi-geo-alt-fill"></i> Go to Locker
                            </div>
                            <h1 id="compartmentLabel" class="display-4 fw-bold mb-0">L23</h1>

                            <!-- Countdown Badge -->
                            <div class="position-absolute top-0 end-0 m-2 badge bg-danger" id="countdownBadge">
                                5s
                            </div>
                            <div class="small mt-2 text-muted">
                                Opening automatically in <span id="countdownText">5</span> seconds
                            </div>
                        </div>

                        <!-- Progress Bar -->
                        <div class="progress mb-3" style="height: 6px;">
                            <div id="progressBar" class="progress-bar bg-primary" style="width:0%;"></div>
                        </div>

                        <div class="alert alert-info small mb-0">
                            Auto-opening in progress...
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row g-3">
            <!-- Left Column: QR Scanner + Status -->
            <div class="col-lg-4">
                <div class="card mb-3 shadow-sm">
                    <div class="card-header d-flex align-items-center">
                        <i class="bi bi-qr-code-scan me-2"></i> QR Scanner
                    </div>
                    <div class="card-body">
                        <div id="qr-reader" class="border border-secondary rounded bg-light" style="height: 350px;">
                        </div>
                        <div id="qr-status" class="mt-2 text-muted small">Initializing scanner...</div>
                        <div class="mt-3 alert alert-success py-2 mb-0 d-flex align-items-center">
                            <i class="bi bi-shield-lock-fill me-2"></i>
                            <small class="mb-0">Secure Mode: QR Authentication Required</small>
                        </div>
                    </div>
                </div>

                <div id="lockerScreen" class="card bg-dark text-white mb-3 shadow-sm">
                    <div class="card-body d-flex flex-column align-items-center py-3">
                        <i id="lockerScreenIcon" class="bi bi-lock-fill fs-3 mb-2"></i>
                        <div class="text-center">
                            <small id="lockerScreenMain" class="d-block fw-bold">Secure System Ready</small>
                            <small id="lockerScreenSub" class="d-block">Present valid QR code</small>
                        </div>
                    </div>
                </div>


                <div class="card shadow-sm">
                    <div class="card-header d-flex align-items-center">
                        <i class="bi bi-info-circle me-2"></i> Session Status
                    </div>
                    <div class="card-body small">
                        <div class="d-flex justify-content-between mb-2">
                            <span><strong>Security:</strong></span>
                            <span class="badge bg-primary">Protected</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span><strong>Scanner:</strong></span>
                            <span class="badge bg-success">Active</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span><strong>Last Auth:</strong></span>
                            <span class="text-muted">None</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Stats + Locker Grid -->
            <div class="col-lg-8">
                <!-- Stats -->
                <div class="row g-2 mb-3">
                    <div class="col-6 col-md-3">
                        <div class="card text-center">
                            <div class="card-body py-2">
                                <small>Available</small>
                                <div class="fs-5 text-success fw-bold">
                                    <%= compartments.filter(c=> !c.isBooked).length %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="card text-center">
                            <div class="card-body py-2">
                                <small>Occupied</small>
                                <div class="fs-5 text-danger fw-bold">
                                    <%= compartments.filter(c=> c.isBooked).length %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="card text-center">
                            <div class="card-body py-2">
                                <small>Active</small>
                                <div class="fs-5 text-primary fw-bold">
                                    <%= compartments.length %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="card text-center">
                            <div class="card-body py-2">
                                <small>Issues</small>
                                <div class="fs-5 text-warning fw-bold">0</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Locker Grid -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between">
                        <span>Secure Locker Bank</span>
                        <small class="text-muted">🔒 QR-Protected</small>
                    </div>
                    <div class="card-body">
                        <div class="row g-2">
                            <% compartments.forEach(c=> { %>
                                <div class="col-6 col-md-4 col-lg-3">
                                    <div class="border rounded text-center py-2 locker-card 
                    <% if (c.isBooked) { %> border-danger <% } else { %> border-success <% } %>">
                                        <div class="locker-icon">
                                            <i class="bi bi-box"></i> <!-- Outline parcel icon -->
                                        </div>
                                        <div><strong>
                                                <%= c.compartmentId %>
                                            </strong></div>
                                        <small class="<%= c.isBooked ? 'text-danger' : 'text-success' %>">
                                            <%= c.isBooked ? 'Busy' : 'Available' %>
                                        </small>
                                    </div>
                                </div>
                                <% }) %>
                        </div>
                    </div>
                </div>
                <!-- Bottom Banner Steps -->
                <!-- <div id="bottomSteps" class="fixed-bottom bg-success text-white p-3 d-none">
                    <div class="container d-flex justify-content-between align-items-center">
                        <div>
                            <i class="bi bi-unlock-fill me-2"></i>
                            <strong id="stepTitle">Step 1 of 2:</strong>
                            <span id="stepText">Place your parcel in the open locker.</span>
                        </div>
                        <button id="confirmButton" class="btn btn-light text-success fw-bold">
                            <i class="bi bi-check2-circle me-1"></i> Confirm
                        </button>
                    </div>
                </div> -->

                <div class="mt-2 small text-muted">
                    <strong>Security Notice:</strong> All locker access requires QR authentication.
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function updateLockerScreen(status) {
            const main = document.getElementById("lockerScreenMain");
            const sub = document.getElementById("lockerScreenSub");
            const icon = document.getElementById("lockerScreenIcon");

            switch (status) {
                case "ready":
                    main.textContent = "Secure System Ready";
                    sub.textContent = "Present valid QR code";
                    icon.className = "bi bi-lock-fill fs-3 mb-2";
                    break;
                case "authenticating":
                    main.textContent = "Authenticating...";
                    sub.textContent = "Please wait";
                    icon.className = "bi bi-shield-lock fs-3 mb-2";
                    break;
                case "unlocked":
                    main.textContent = "Locker Unlocked";
                    sub.textContent = "Place your parcel";
                    icon.className = "bi bi-unlock-fill fs-3 mb-2";
                    break;
                case "awaiting_pick":
                    main.textContent = "Locker Unlocked";
                    sub.textContent = "Pick your parcel";
                    icon.className = "bi bi-box-seam fs-3 mb-2";
                    break;
                case "closing":
                    main.textContent = "Please Close the Door";
                    sub.textContent = "Finalizing process";
                    icon.className = "bi bi-door-closed-fill fs-3 mb-2";
                    break;
                case "completed":
                    main.textContent = "Thank You!";
                    sub.textContent = "Transaction complete";
                    icon.className = "bi bi-check-circle-fill fs-3 mb-2";
                    break;
                case "error":
                    main.textContent = "Parcel already picked!";
                    sub.textContent = "Transaction complete";
                    icon.className = "bi bi-shield-lock fs-3 mb-2";
                    break;
                default:
                    main.textContent = "Awaiting Instructions";
                    sub.textContent = "";
                    icon.className = "bi bi-info-circle fs-3 mb-2";
            }
        }


        document.addEventListener("DOMContentLoaded", () => {
            const lockerId = "<%= lockerId %>";
            const statusEl = document.getElementById("qr-status");

            const scanner = new Html5QrcodeScanner(
                "qr-reader",
                { fps: 10, qrbox: 200 },
                false
            );

            function onScanSuccess(decodedText) {
                scanner.clear().then(() => {
                    statusEl.textContent = "Processing QR code…";
                    statusEl.className = "mt-2 small text-primary";
                    updateLockerScreen("authenticating");


                    let accessCode;
                    try {
                        accessCode = JSON.parse(decodedText).accessCode;
                        if (!accessCode) throw new Error("Missing accessCode");
                    } catch (e) {
                        return handleError("Invalid QR format");
                    }

                    fetch("/api/locker/scan", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ accessCode, lockerId, status })
                    })
                        .then(r => r.json())
                        .then(json => {
                            if (json.success) {
                                const compartmentId = json.compartmentId;
                                const packageType = "medium package";
                                const status = json.status;
                                showCompartmentFlow(compartmentId, packageType, status);
                            } else {
                                handleError(json.message || "Server rejected QR");
                            }
                        })
                        .catch(() => handleError("Network error"));
                });
            }

            function handleError(msg) {
                statusEl.textContent = `❌ ${msg} — retrying in 3s…`;
                statusEl.className = "mt-2 small text-danger";

                setTimeout(() => {
                    statusEl.textContent = "Show QR code to scanner";
                    statusEl.className = "mt-2 small text-muted";
                    scanner.render(onScanSuccess);
                    updateLockerScreen("error");
                }, 3000);
            }

            scanner.render(onScanSuccess, () => { });
            updateLockerScreen("ready");
            statusEl.textContent = "Scanner ready. Show QR code.";
            statusEl.className = "mt-2 small text-muted";

        });

        function showStepInCard(compartmentId, status = 'awaiting_drop') {
            updateLockerScreen("unlocked");

            const lockerCards = document.querySelectorAll('.locker-card');
            lockerCards.forEach(card => {
                if (card.querySelector('strong').textContent.trim() === compartmentId) {
                    // Clear any previous instructions
                    const existingStepDiv = card.querySelector('.compartment-steps');
                    if (existingStepDiv) existingStepDiv.remove();

                    // Create container
                    const stepDiv = document.createElement('div');
                    stepDiv.className = 'compartment-steps mt-2';

                    // Step Text
                    const stepText = document.createElement('small');
                    stepText.className = 'd-block text-muted';
                    if (status === 'awaiting_pick') {
                        stepText.textContent = `Step 1: Retrieve your parcel.`;
                    } else {
                        stepText.textContent = `Step 1: Place your parcel.`;
                    }
                    stepDiv.appendChild(stepText);

                    // Confirm Button
                    const button = document.createElement('button');
                    button.className = 'btn btn-sm btn-outline-primary mt-1';
                    button.textContent = status === 'awaiting_pick' ? 'Parcel Retrieved' : 'Parcel Placed';

                    let step = 1;

                    button.onclick = () => {
                        if (step === 1) {
                            step = 2;
                            stepText.textContent = `Step 2: Close the locker door.`;
                            button.textContent = 'Close & Secure';
                            updateLockerScreen("closing");
                        } else {
                            // Finish interaction
                            card.classList.remove('blinking');
                            const iconEl = card.querySelector('.locker-icon');
                            if (iconEl) {
                                iconEl.innerHTML = `<i class="bi bi-lock-fill"></i>`;
                            }
                            updateLockerScreen("completed");
                            // Remove the step instructions
                            stepDiv.remove();
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        }
                    };

                    stepDiv.appendChild(button);
                    card.appendChild(stepDiv);
                }
            });
        }

        function showCompartmentFlow(compartmentId, packageType, status = 'awaiting_drop') {
            const modalTitle = document.querySelector('#compartmentModal .modal-title');
            const modalBodyText = document.querySelector('#compartmentModal .modal-body p');
            const countdownText = document.getElementById('countdownText');
            const countdownBadge = document.getElementById('countdownBadge');
            const progressBar = document.getElementById('progressBar');

            document.getElementById('compartmentLabel').textContent = compartmentId;
            document.getElementById('packageType').textContent = packageType;
            countdownText.textContent = '5';
            countdownBadge.textContent = '5s';
            progressBar.style.width = '0%';

            // Update modal text based on status

            if (status === 'awaiting_pick') {
                updateLockerScreen("awaiting_pick");
                modalTitle.innerHTML = `<i class="bi bi-box-arrow-in-down me-2 text-success"></i> Pick-up Location Ready`;
                modalBodyText.innerHTML = `Locker prepared for <strong>${packageType}</strong>.`;
                document.querySelector('.alert-info').textContent = "Auto-unlocking for retrieval...";
            } else {
                updateLockerScreen("unlocked");
                modalTitle.innerHTML = `<i class="bi bi-box-seam-fill me-2 text-success"></i> Drop-off Location Ready`;
                modalBodyText.innerHTML = `Locker prepared for <strong>${packageType}</strong>.`;
                document.querySelector('.alert-info').textContent = "Auto-opening in progress...";
            }

            const modal = new bootstrap.Modal(document.getElementById('compartmentModal'));
            modal.show();

            // Highlight and swap icon
            const lockerCards = document.querySelectorAll('.locker-card');
            lockerCards.forEach(card => {
                if (card.querySelector('strong').textContent.trim() === compartmentId) {
                    card.classList.add('blinking');
                    let iconEl = card.querySelector('.locker-icon');
                    if (!iconEl) {
                        iconEl = document.createElement('div');
                        iconEl.className = 'locker-icon';
                        card.insertBefore(iconEl, card.children[1]);
                    }
                    iconEl.innerHTML = `<i class="bi bi-door-open-fill text-primary"></i>`;
                }
            });

            let totalDuration = 5000;
            let startTime = Date.now();

            const countdownInterval = setInterval(() => {
                let elapsed = Date.now() - startTime;
                let remaining = Math.max(0, totalDuration - elapsed);
                let pct = ((elapsed / totalDuration) * 100).toFixed(1);

                progressBar.style.width = `${pct}%`;

                let newSeconds = Math.ceil(remaining / 1000);
                countdownText.textContent = newSeconds;
                countdownBadge.textContent = `${newSeconds}s`;

                if (remaining <= 0) {
                    clearInterval(countdownInterval);
                    modal.hide();
                    showStepInCard(compartmentId, status);
                }
            }, 100);
        }

        function showStepBanner(compartmentId, status = 'awaiting_drop') {
            if (status === 'awaiting_pick') {
                updateLockerScreen("unlocked");
            } else {
                updateLockerScreen("unlocked");
            }
            const banner = document.getElementById('bottomSteps');
            banner.classList.remove('d-none');

            const stepTitle = document.getElementById('stepTitle');
            const stepText = document.getElementById('stepText');
            const button = document.getElementById('confirmButton');

            let step = 1;

            if (status === 'awaiting_pick') {
                // Pick-up flow
                updateLockerScreen("awaiting_pick");
                stepTitle.textContent = `Step 1 of 2:`;
                stepText.textContent = `Open locker ${compartmentId} and retrieve your parcel.`;
                button.textContent = 'Parcel Retrieved';
                button.classList.remove('btn-primary');
                button.classList.add('btn-light');
            } else {
                // Drop-off flow
                stepTitle.textContent = `Step 1 of 2:`;
                stepText.textContent = `Place your parcel in locker ${compartmentId}.`;
                button.textContent = 'Parcel Placed';
                button.classList.remove('btn-primary');
                button.classList.add('btn-light');
            }

            button.onclick = () => {
                if (step === 1) {
                    if (status === 'awaiting_pick') {
                        stepTitle.textContent = `Step 2 of 2:`;
                        stepText.textContent = `Close the locker door to finish retrieval.`;
                        updateLockerScreen("closing");

                        button.textContent = 'Close & Secure';
                    } else {
                        stepTitle.textContent = `Step 2 of 2:`;
                        stepText.textContent = `Close the locker door to complete drop-off.`;
                        updateLockerScreen("closing");

                        button.textContent = 'Close & Secure';
                    }
                    updateLockerScreen("closing");
                    step = 2;
                } else {
                    banner.classList.add('d-none');

                    const lockerCards = document.querySelectorAll('.locker-card');
                    lockerCards.forEach(card => {
                        if (card.querySelector('strong').textContent.trim() === compartmentId) {
                            card.classList.remove('blinking');
                            const iconEl = card.querySelector('.locker-icon');
                            if (iconEl) {
                                iconEl.innerHTML = `<i class="bi bi-lock-fill"></i>`;
                            }
                        }
                    });

                    updateLockerScreen("completed");
                    location.reload();
                }
            };

        }


    </script>




</body>

</html>